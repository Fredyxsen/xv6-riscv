Funcionamiento y Lógica
El sistema de permisos implementado busca mejorar el control sobre cómo se acceden y modifican los archivos en xv6. Este sistema desarrollado permite:
1. Definir si un archivo es solo de lectura, solo de escritura o lectura/escritura
2. Introducir un permiso especial para hacer un archivo inmutable, es decir, no modificable en su contenido ni en sus permisos

Tipo de permisos(inode):

- 0: Sin permisos de lectura ni escritura.
- 1: Solo lectura.
- 2: Solo escritura.
- 3: Lectura y escritura (valor predeterminado al crear un archivo).
- 5: Inmutable (solo lectura y no modificable).

Principales cambios de funcionamiento
* Al abrir un archivo: si uno intenta abrir un archivo en modo escritura pero este tiene permisos de solo lectura o es inmutable, el sistema devuelve un error
* Al escribir en un archivo: si el archivo no tiene permisos de escritura, la operacion falla
* Al cambiar permisos con chmod: Uno puede cambiar los permisos de los archivos, a menos que este sea inmutable. Por lo que si el archivo es inmutable, chmod retorna un error

Modificaciones realizadas
1. Campo permisos en el inode( Kernel/fs.h)
    - se añadio un campo de permissions en la estructura inode para guardar los permisos del archivo
    - el campo inicializa con el valor de 3 ( lectura y escritura por default) al crear un archivo

2. Validaciones en las operaciones de los archivos ( kernel/sysfile.c)
- sys_open:Ahora valida que no se pueda abrir un archivo en modo escritura si los permisos del archivo no lo permiten.
- sys_write: Verifica los permisos antes de escribir. Si el archivo no tiene permisos de escritura, devuelve un error.
- sys_read:Se mantuvo casi sin cambios, ya que las operaciones de lectura solo requieren que el archivo tenga permisos de lectura.

3. Llamada al sistema chmod(kernel/sysfile.c)
- Implementamos sys_chmod para permitir que los usuarios cambien los permisos de un archivo.
- El proceso:
    * Se verifica si el archivo existe.
    * Si el archivo es inmutable, chmod retorna un error.
    * Si todo está bien, se actualiza el campo permissions del archivo.

4. Registro de la Nueva Llamada al Sistema( kernel/syscall.h y kernel/syscall.c)
- kernel/syscall.h: Se añadió la definición de SYS_chmod.
- kernel/syscall.c: Se registró la función sys_chmod.

5. Pruebas(user/permtest.c)
Se creó un programa para validar las funcionalidades:

    1. Crear un archivo con permisos de lectura y escritura.
    2. Cambiar los permisos a solo lectura y verificar que no se pueda escribir.
    3. Cambiar los permisos de vuelta a lectura/escritura y validar que se pueda escribir de nuevo.
    4. Cambiar permisos a inmutable y verificar que:
        * No se puede escribir en el archivo.
        * No se pueden modificar los permisos.



Dificultades encontradas y soluciones
1. Problema al incluir archivos de encabezado:
- Errores en la redefinicion en estructuras como spinlock y inode
    - Solucion: ajuste y revisada de las inclusiones duplicadas y el orden de los encabezados en los archivos fuente

2. Compatibilidad con operaciones existentes:
- Las funciones como sys_open y sys_write no estaban diseñadas para trabajar con permisos de archivos.
- Solución: Se añadieron validaciones para verificar los permisos antes de realizar operaciones como abrir o escribir.

3. Error al registrar chmod en el sistema:
- Hubo problemas iniciales para registrar correctamente la nueva llamada al sistema en la tabla de llamadas.
- Solución: Se revisaron los archivos syscall.h, syscall.c y usys.pl para asegurarnos de que la llamada estuviera correctamente configurada.

4. Pruebas fallidas en casos límite:
- Durante el desarrollo del programa de prueba, surgieron problemas al cambiar permisos de archivos inmutables.
- Solución: Se ajustaron las validaciones en sys_chmod para que los archivos inmutables devuelvan correctamente un error al intentar cambiar permisos.


Adjunto imagen de prueba, en caso de que no compile
![alt text](image.png)
